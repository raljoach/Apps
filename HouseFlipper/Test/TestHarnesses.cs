using Automata;
using Common;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Test.Common;
using Test.Harness;
using Test.ModelBased;
using Test.ModelBased.System;

namespace HouseFlipper.Test
{        
    public class CommandLineHarness : SimpleTestHarness
    {
        public CommandLineHarness() : base(new Demo()) { }

        protected override TestTable DefineTests()
        {
            var tests = new TestTable()
            {
                { new TestInput(DataFolder.Default), new ExpectedResult(new PartialMatch(@"Using data folder: C:\Users\ralph.joachim\Documents\Visual Studio 2015\Projects\HouseFlipper\data")) },
                { new TestInput(DataFolder.NotExistent), new ExpectedResult(new PartialMatch("Missing data folder")) },
                { new TestInput(DataFolder.Exists, Files.NotExistent), new ExpectedResult(new PartialMatch("No files in data folder")) },
                { new TestInput(DataFolder.Exists, Files.Exists, FileCount.Single, HeaderCount.None), new ExpectedResult(new PartialMatch("Empty file")) },
                { new TestInput(DataFolder.Exists, Files.Exists, FileCount.Single, HeaderCount.Single, DataRowCount.None), new ExpectedResult(new PartialMatch("Header row found, but no data rows exist in file")) },
            };

            return tests;
        }
    }

    public class AutoGeneratedHarness : CommandLineHarness
    {
        public AutoGeneratedHarness() /*: base(new Demo())*/ { }

        protected override TestTable DefineTests()
        {
            TestTable tests = AutoGenerate();
            return tests;
        }

        private static TestTable AutoGenerate()
        {
            var group = new ParameterGroup(
                typeof(DataFolder), typeof(Files), typeof(FileCount), typeof(HeaderCount), typeof(DataRowCount)
                /*
                new List<Type>() {
                    typeof(DataFolder), typeof(Files), typeof(FileCount), typeof(HeaderCount), typeof(DataRowCount)
                },
                new List<Type>() {
                    typeof(string), typeof(File), typeof(File), typeof(string), typeof(string)
                },
                new List<ParameterValueFactory>() {
                    new DataFolderFactory(), typeof(File), typeof(File), typeof(string), typeof(string)
                }*/
                );
            var table = new ParameterModel(group).Generate();
            // TODO: Make each cell of table, a ParameterInfo with an actual ParameterFactoryValue instance
            return new TestTable(table);    
        }
    }

    public class ModelBasedTestHarness : TestHarness
    {
        Driver driver = new Demo();
        public ModelBasedTestHarness()
        {
            var tester = new Tester(
                new ExecutionModel(
                    () =>
                    {
                        ProgramRun();
                    }
                ));
        }

        private void ProgramRun()
        {
            TestState[] states = new TestState[]
            {
                //new State();
            };
            var stateMachine = new TestMachine(states,driver);
            stateMachine.Run();
        }
    }
}
